.TH mlkit 1 "Jan 25, 2006" "version 4.3.0" "MLKit - a compiler for Standard ML"
.SH NAME
mlkit \- A fullblown Standard ML compiler
.SH SYNOPSIS
mlkit [OPTION]... [file.sml | file.sig | file.mlb]

All possible options are listed below.
.SH DEFAULTS
\fB-verbose\fR off,
\fB--comments_in_x86_asmcode\fR off,
\fB-c\fR off,
\fB-timings\fR off,
\fB--contract\fR on,
\fB-cr\fR off,
\fB-cross_opt\fR on,
\fB-dangle\fR off,
\fB--dangling_pointers_statistics\fR off,
\fB-debug\fR off,
\fB--debug_linking\fR off,
\fB--debug_man_enrich\fR off,
\fB--debug_which_at\fR off,
\fB--delete_target_files\fR on,
\fB--disable_atbot_analysis\fR off,
\fB--disable_flow_var\fR off,
\fB--eliminate_explicit_records\fR on,
\fB-xt\fR off,
\fB-gc\fR on,
\fB-g\fR off,
\fB-gengc\fR off,
\fB-basislib\fR on,
\fB--install_dir\fR /home/mael/mlkit/kit,
\fB--libs\fR m,c,dl,
\fB-ltdce\fR on,
\fB--log_to_file\fR off,
\fB--maximum_inline_size\fR 50,
\fB--maximum_specialise_size\fR 200,
\fB--minimize_fixs\fR on,
\fB--namebase\fR dummyBase,
\fB-opt\fR on,
\fB-o\fR run,
\fB-ptc\fR on,
\fB--print_K_normal_forms\fR off,
\fB-Ppp\fR off,
\fB--print_bit_vectors\fR off,
\fB--print_calc_offset_program\fR off,
\fB-Pcee\fR off,
\fB-Pccp\fR off,
\fB-Pceb\fR off,
\fB-Pdre\fR off,
\fB-Pdresm\fR off,
\fB-Peffects\fR off,
\fB-Peb\fR off,
\fB--print_fetch_and_flush_program\fR off,
\fB-Plcp\fR off,
\fB--print_linearised_program\fR off,
\fB--print_normalized_program\fR off,
\fB-Pole\fR off,
\fB-Ppse\fR off,
\fB-Prfg\fR off,
\fB-Prse0\fR off,
\fB-Pregions\fR on,
\fB--print_register_allocated_program\fR off,
\fB--print_rho_levels\fR off,
\fB--print_rho_types\fR off,
\fB--print_simplified_program\fR off,
\fB-Psme\fR off,
\fB-Ptypestamps\fR off,
\fB-Ptypes\fR off,
\fB-Pwordregions\fR off,
\fB-quot\fR off,
\fB--raggedRight\fR on,
\fB-scratch\fR off,
\fB-ri\fR on,
\fB-prof\fR off,
\fB--regionvar\fR ~1,
\fB--register_allocation\fR on,
\fB-sig\fR off,
\fB-rep\fR on,
\fB--safeLinkTimeElimination\fR off,
\fB--specialize_recursive_functions\fR on,
\fB--statistics_after_optimisation\fR off,
\fB--strip\fR off,
\fB--tag_pairs\fR off,
\fB-tag\fR on,
\fB--type_check_lambda\fR on,
\fB--unbox_function_arguments\fR on,
\fB-uncurry\fR on,
\fB--warn_on_escaping_puts\fR off,
\fB-w\fR 100.
.SH DESCRIPTION
When invoked, 
.B mlkit
will compile the specified sources into an executable file 
.B run
through a series of translation phases. Various options (see below) can be used to control the printing of intermediate forms and to which degree various optimizations are performed. If source files are organised in ML Basis Files (files with extension .mlb), the compiler will memoize symbol table information and object code in the dedicated MLB directories located together with the source files, so as to minimize necessary recompilation upon changes of source code.

To learn more about programming with the MLKit, consult the MLKit web page at

.B http://www.itu.dk/research/mlkit
.SH STANDARDS
The MLKit implements Standard ML (Revised 1997) and has almost full support for the Standard ML Basis Library (version of 2002). See the MLKit home page for a detailed overview of the support for the Standard ML Basis Library.
.SH EXAMPLES
For examples, consult the MLKit manual "Programming with Regions in the MLKit", which is available from the MLKit home page.
.SH OPTIONS
.IP "\fB--chat, -verbose\fR" 4
.IX Item "--chat, -verbose"
Print a message for each compilation step in the compiler.
.IP "\fB--comments_in_x86_asmcode\fR" 4
.IX Item "--comments_in_x86_asmcode"
Insert comments in x86 assembler code.
.IP "\fB--compile_only, -c\fR" 4
.IX Item "--compile_only, -c"
Compile only. Suppresses generation of executable
.IP "\fB--compiler_timings, -timings\fR" 4
.IX Item "--compiler_timings, -timings"
Show compiler timings for each compilation phase.
.IP "\fB--contract\fR" 4
.IX Item "--contract"
Contract is responsible for in-lining, specialization,
elimination of dead code, and much else (Lambda
Expression Optimiser).
.IP "\fB--contract_regions, -cr\fR" 4
.IX Item "--contract_regions, -cr"
When this option is enabled, identically typed
regions bound by the same letregion construct
are unified. Moreover, region parameters to
non-exported functions are trimmed whenever
possible.
.IP "\fB--cross_module_opt, -cross_opt\fR" 4
.IX Item "--cross_module_opt, -cross_opt"
Enable cross-module optimisation including in-lining
of small functions and specialisation of small
recursive functions. Which optimisations are performed
across modules is controlled by individual optimisation
flags.
.IP "\fB--dangling_pointers, -dangle\fR" 4
.IX Item "--dangling_pointers, -dangle"
When this option is disabled, dangling pointers
are avoided by forcing values captured in
closures to live at-least as long as the closure
itself. So as to make garbage collection sound,
this option is disabled by default when garbage
collection is enabled.
.IP "\fB--dangling_pointers_statistics\fR" 4
.IX Item "--dangling_pointers_statistics"
When enabled, the compiler prints statistics about
the number of times strengthening of the region typing
rules (to avoid dangling pointers during evaluation)
effects the target program. This flag is useful only
when the flag -gc or -no_dangle is enabled.
.IP "\fB--debug_compiler, -debug\fR" 4
.IX Item "--debug_compiler, -debug"
Print intermediate forms of a program during compilation.
.IP "\fB--debug_linking\fR" 4
.IX Item "--debug_linking"
Debug linking of target code by showing which object
files are linked together.
.IP "\fB--debug_man_enrich\fR" 4
.IX Item "--debug_man_enrich"
During interactive use, show information about why a
program unit need be recompiled. In the MLKit, a
program unit (or a functor body) is recompiled if
either (a) the program unit is modified, or (b)
information about an identifier for which the program
unit depends upon has changed.
.IP "\fB--debug_which_at\fR" 4
.IX Item "--debug_which_at"
Debug storage mode analysis.
.IP "\fB--delete_target_files\fR" 4
.IX Item "--delete_target_files"
Delete assembler files produced by the compiler. If you
disable this flag, you can inspect the assembler code
produced by the compiler.
.IP "\fB--disable_atbot_analysis\fR" 4
.IX Item "--disable_atbot_analysis"
Disable storage mode analysis. That is, turn all
allocation directives into attop.
.IP "\fB--disable_flow_var\fR" 4
.IX Item "--disable_flow_var"
Disable optimised compilation of control-flow
code, such as conditional expressions.
.IP "\fB--eliminate_explicit_records\fR" 4
.IX Item "--eliminate_explicit_records"
Eliminate bindings of explicit records only used for
selections. Transform
      let r = (e1,...,en) in ... #i r .. #j r ...
into
      let x1=e1 in ... let xn=en in ... xi .. xj ...
(Lambda Expression Optimiser).
.IP "\fB--extended_typing, -xt\fR" 4
.IX Item "--extended_typing, -xt"
When this flag is enabled, SMLserver requires
scripts to be functor SCRIPTLET's, which are
automatically instantiated by SMLserver in a
type safe way. To construct and link to XHTML
forms in a type safe way, SMLserver constructs an
abstract interface to the forms from the functor
arguments of the scriptlets. This interface is
constructed and written to the file scripts.gen.sml
prior to the actual type checking and compilation
of the project.
.IP "\fB--garbage_collection, -gc\fR" 4
.IX Item "--garbage_collection, -gc"
Enable garbage collection. When enabled, regions are
garbage collected during execution of the program. When
garbage collection is enabled, all values are tagged. Due
to region inference, for most programs, the garbage
collector is invoked less often than for systems based
only on garbage collection. When garbage collection is
enabled, introduction of dangling pointers are avoided by
forcing values captured in closures to live at-least as
long as the closure. Moreover, enabling garbage
collection implicitly enables the preservation of tail
calls (see the option ``preserve_tail_calls''.)
.IP "\fB--gdb_support, -g\fR" 4
.IX Item "--gdb_support, -g"
When enabled, the compiler passes the option --gstabs
to `as' (The GNU Assembler) and preserves the generated
assembler files (.s files). Passing the --gstabs
option to `as' makes it possible to step through
the generated program using gdb (The GNU Debugger).
.IP "\fB--generational_garbage_collection, -gengc\fR" 4
.IX Item "--generational_garbage_collection, -gengc"
Enable generational garbage collection. Same as option
garbage collection except that two generations are used
for each region.
.IP "\fB--help\fR" 4
.IX Item "--help"
Print help information and exit.
.IP "\fB--help S\fR" 4
.IX Item "--help S"
Print help information about an option and exit.
.IP "\fB--import_basislib, -basislib\fR" 4
.IX Item "--import_basislib, -basislib"
Import Basis Library automatically in your projects. If 
you wish to make use of the Standard ML Basis Library
in your projects, this option should be turned on, unless
you wish to import the Basis Library manually in your
projects.
.IP "\fB--install_dir S\fR" 4
.IX Item "--install_dir S"
Installation directory for the MLKit. For normal
execution you should not modify this value. However,
if you wish to use the MLKit with an altered runtime
system and you do not wish to exchange the .o-files in
the bin-subdirectory (for example because you are running
the MLKit on a shared system), you can update this
setting and the system will try to link to a runtime
system in the bin-subdirectory found in the new install
directory.
.IP "\fB--libdirs S\fR" 4
.IX Item "--libdirs S"
This option controls where ld looks for
archives. The format is a comma-separated list
of directories; see the -libs entry. The default
is the empty list; thus 'ld' will look for
libraries in only the system specific default
directores. The directories are passed to 'ld'
using the -L option.
.IP "\fB--libs S\fR" 4
.IX Item "--libs S"
For accessing a foreign function residing in
an archive named libNAME.a from Standard ML code
(using prim), you need to add 'NAME' to this
comma-separated list. Notice that an object file
(with extension '.o') is an archive if it is
renamed to have extension '.a'. You may need to
use the -libdirs option for specifying
directories for which ld should look for library
archives. The libraries are passed to 'ld' using
the -l option.
.IP "\fB--link_code S, -link S\fR" 4
.IX Item "--link_code S, -link S"
Link-files to be linked together to form an
executable.
.IP "\fB--link_code_scripts S, -link_scripts S\fR" 4
.IX Item "--link_code_scripts S, -link_scripts S"
Link-files for SMLserver scripts; link-files
specified with -link represent libraries when
mlkit is used with SMLserver.
.IP "\fB--link_time_dead_code_elimination, -ltdce\fR" 4
.IX Item "--link_time_dead_code_elimination, -ltdce"
Link time dead code elimination.
.IP "\fB--load_basis_files S, -load S\fR" 4
.IX Item "--load_basis_files S, -load S"
Basis files to be loaded before compilation
proper.
.IP "\fB--log_to_file\fR" 4
.IX Item "--log_to_file"
Log to files instead of stdout.
.IP "\fB--man\fR" 4
.IX Item "--man"
Print man-page and exit.
.IP "\fB--maximum_inline_size N\fR" 4
.IX Item "--maximum_inline_size N"
Functions smaller than this size (counted in abstract
syntax tree nodes) are in-lines, even if they are used
more than once. Functions that are used only once are
always in-lined.
.IP "\fB--maximum_specialise_size N\fR" 4
.IX Item "--maximum_specialise_size N"
Curried functions smaller than this size (counted in
abstract syntax tree nodes) are specialised if all
applications of the function within its own body are
applied to its formal argument, even if they are used
more than once. Functions that are used only once are
specialised no matter their size. See also the option
--specialize_recursive_functions.
.IP "\fB--minimize_fixs\fR" 4
.IX Item "--minimize_fixs"
Minimize fix constructs (Lambda Expression Optimiser).
.IP "\fB--namebase S\fR" 4
.IX Item "--namebase S"
Name base to enforce unique names when compiling
mlb-files.
.IP "\fB--no_contract\fR" 4
.IX Item "--no_contract"
Opposite of --contract.
.IP "\fB--no_cross_module_opt, -no_cross_opt\fR" 4
.IX Item "--no_cross_module_opt, -no_cross_opt"
Opposite of --cross_module_opt, -cross_opt.
.IP "\fB--no_dangling_pointers, -no_dangle\fR" 4
.IX Item "--no_dangling_pointers, -no_dangle"
Opposite of --dangling_pointers, -dangle.
.IP "\fB--no_delete_target_files\fR" 4
.IX Item "--no_delete_target_files"
Opposite of --delete_target_files.
.IP "\fB--no_eliminate_explicit_records\fR" 4
.IX Item "--no_eliminate_explicit_records"
Opposite of --eliminate_explicit_records.
.IP "\fB--no_garbage_collection, -no_gc\fR" 4
.IX Item "--no_garbage_collection, -no_gc"
Opposite of --garbage_collection, -gc.
.IP "\fB--no_generational_garbage_collection, -no_gengc\fR" 4
.IX Item "--no_generational_garbage_collection, -no_gengc"
Opposite of --generational_garbage_collection, -gengc.
.IP "\fB--no_import_basislib, -no_basislib\fR" 4
.IX Item "--no_import_basislib, -no_basislib"
Opposite of --import_basislib, -basislib.
.IP "\fB--no_link_time_dead_code_elimination, -no_ltdce\fR" 4
.IX Item "--no_link_time_dead_code_elimination, -no_ltdce"
Opposite of --link_time_dead_code_elimination, -ltdce.
.IP "\fB--no_minimize_fixs\fR" 4
.IX Item "--no_minimize_fixs"
Opposite of --minimize_fixs.
.IP "\fB--no_optimiser, -no_opt\fR" 4
.IX Item "--no_optimiser, -no_opt"
Opposite of --optimiser, -opt.
.IP "\fB--no_preserve_tail_calls, -no_ptc\fR" 4
.IX Item "--no_preserve_tail_calls, -no_ptc"
Opposite of --preserve_tail_calls, -ptc.
.IP "\fB--no_print_regions, -no_Pregions\fR" 4
.IX Item "--no_print_regions, -no_Pregions"
Opposite of --print_regions, -Pregions.
.IP "\fB--no_raggedRight\fR" 4
.IX Item "--no_raggedRight"
Opposite of --raggedRight.
.IP "\fB--no_region_inference, -no_ri\fR" 4
.IX Item "--no_region_inference, -no_ri"
Opposite of --region_inference, -ri.
.IP "\fB--no_register_allocation\fR" 4
.IX Item "--no_register_allocation"
Opposite of --register_allocation.
.IP "\fB--no_repository, -no_rep\fR" 4
.IX Item "--no_repository, -no_rep"
Opposite of --repository, -rep.
.IP "\fB--no_specialize_recursive_functions\fR" 4
.IX Item "--no_specialize_recursive_functions"
Opposite of --specialize_recursive_functions.
.IP "\fB--no_type_check_lambda\fR" 4
.IX Item "--no_type_check_lambda"
Opposite of --type_check_lambda.
.IP "\fB--no_unbox_function_arguments\fR" 4
.IX Item "--no_unbox_function_arguments"
Opposite of --unbox_function_arguments.
.IP "\fB--no_uncurrying, -no_uncurry\fR" 4
.IX Item "--no_uncurrying, -no_uncurry"
Opposite of --uncurrying, -uncurry.
.IP "\fB--optimiser, -opt\fR" 4
.IX Item "--optimiser, -opt"
Enable optimisation of intermediate language code
(Lambda Expressions). Which optimisations are performed
is controlled by individual flags. The optimisations
include function in-lining, function specialisation,
fix-minimization, unboxing of function arguments, and
elimination of unnecessary record constructions.
.IP "\fB--output S, -o S\fR" 4
.IX Item "--output S, -o S"
The name of the executable file generated by
the Kit.
.IP "\fB--preserve_tail_calls, -ptc\fR" 4
.IX Item "--preserve_tail_calls, -ptc"
Avoid the wrapping of letregion constructs around
tail calls. Turning on garbage collection
automatically turns on this option.
.IP "\fB--print_K_normal_forms\fR" 4
.IX Item "--print_K_normal_forms"
Print Region Expressions in K-Normal Form. Applicable,
only after storage mode analysis has been applied.
.IP "\fB--print_all_program_points, -Ppp\fR" 4
.IX Item "--print_all_program_points, -Ppp"
Print all program points when printing physical size
inference expressions.
.IP "\fB--print_bit_vectors\fR" 4
.IX Item "--print_bit_vectors"

.IP "\fB--print_calc_offset_program\fR" 4
.IX Item "--print_calc_offset_program"

.IP "\fB--print_call_explicit_expression, -Pcee\fR" 4
.IX Item "--print_call_explicit_expression, -Pcee"
Print Region Expression with call annotations.
.IP "\fB--print_clos_conv_program, -Pccp\fR" 4
.IX Item "--print_clos_conv_program, -Pccp"
Print Region Expression after closure conversion.
.IP "\fB--print_closed_export_bases, -Pceb\fR" 4
.IX Item "--print_closed_export_bases, -Pceb"
Controls printing of closed export bases.
.IP "\fB--print_drop_regions_expression, -Pdre\fR" 4
.IX Item "--print_drop_regions_expression, -Pdre"
Print Region Expression after dropping word regions and
regions arguments with only get-effects.
.IP "\fB--print_drop_regions_expression_with_storage_modes, -Pdresm\fR" 4
.IX Item "--print_drop_regions_expression_with_storage_modes, -Pdresm"
Print Region Expression after dropping word regions and
regions arguments with only get-effects. Also print
atbot and attop annotations resulting from storage mode
analysis.
.IP "\fB--print_effects, -Peffects\fR" 4
.IX Item "--print_effects, -Peffects"
Print effects in region types.
.IP "\fB--print_export_bases, -Peb\fR" 4
.IX Item "--print_export_bases, -Peb"
Controls printing of export bases.
.IP "\fB--print_fetch_and_flush_program\fR" 4
.IX Item "--print_fetch_and_flush_program"
Print program with instructions for activation
record fetching and flushing.
.IP "\fB--print_lift_conv_program, -Plcp\fR" 4
.IX Item "--print_lift_conv_program, -Plcp"
Print Region Expression after lifting. Used for the
compilation into byte code (KAM).
.IP "\fB--print_linearised_program\fR" 4
.IX Item "--print_linearised_program"
Print a linearlised representation of the
program unit.
.IP "\fB--print_normalized_program\fR" 4
.IX Item "--print_normalized_program"
Print Region Expression after K-normalisation.
.IP "\fB--print_opt_lambda_expression, -Pole\fR" 4
.IX Item "--print_opt_lambda_expression, -Pole"
Print Lambda Expression after optimisation.
.IP "\fB--print_physical_size_inference_expression, -Ppse\fR" 4
.IX Item "--print_physical_size_inference_expression, -Ppse"
Print Region Expression after physical size inference.
.IP "\fB--print_region_flow_graph, -Prfg\fR" 4
.IX Item "--print_region_flow_graph, -Prfg"
Print a region flow graph for the program fragment
and generate a .vcg-file, which can be viewed using
the xvcg program.
.IP "\fB--print_region_static_env0, -Prse0\fR" 4
.IX Item "--print_region_static_env0, -Prse0"
Print imported region static environment prior to
region inference.
.IP "\fB--print_regions, -Pregions\fR" 4
.IX Item "--print_regions, -Pregions"
Print region variables in types and expressions.
.IP "\fB--print_register_allocated_program\fR" 4
.IX Item "--print_register_allocated_program"

.IP "\fB--print_rho_levels\fR" 4
.IX Item "--print_rho_levels"
Print levels of region and effect variables in types and
intermediate forms. Levels control quantification of
region and effect variables.
.IP "\fB--print_rho_types\fR" 4
.IX Item "--print_rho_types"
Print region types of region variables in types and
intermediate forms. Possible region types are:
    w  Type of regions containing only word values; these
       regions are dropped from the program because word
       values are represented unboxed.
    p  Type of regions containing pairs.
    a  Type of regions containing arrays.
    r  Type of regions containing references.
    t  Type of regions containing triples.
    s  Type of regions containing strings.
    B  Type of regions associated with type variables.
       Regions of this type do not exist at runtime.
    T  Type of regions containing other than the above
       kinds of values.
.IP "\fB--print_simplified_program\fR" 4
.IX Item "--print_simplified_program"
Print simplified program after register
allocation.
.IP "\fB--print_storage_mode_expression, -Psme\fR" 4
.IX Item "--print_storage_mode_expression, -Psme"
Print Region Expression after storage mode analysis
.IP "\fB--print_type_name_stamps, -Ptypestamps\fR" 4
.IX Item "--print_type_name_stamps, -Ptypestamps"
Print type name stamps and their attributes in types
and expressions.
.IP "\fB--print_types, -Ptypes\fR" 4
.IX Item "--print_types, -Ptypes"
Print types when printing intermediate forms. For Lambda
Expressions, ordinary ML types are printed, whereas for
Region Expressions, region types are printed.
.IP "\fB--print_word_regions, -Pwordregions\fR" 4
.IX Item "--print_word_regions, -Pwordregions"
Also print word regions that have been dropped.
.IP "\fB--quotation, -quot\fR" 4
.IX Item "--quotation, -quot"
Enable support for quotations and anti-quotations.
When enabled, the datatype
   datatype 'a frag = QUOTE of string
                    | ANTIQUOTE 'a
is available in the initial environment. Moreover,
values of this datatype may be constructed using
the quotation/antiquotation syntax:
   val s = "world" 
   val a : string frag list = `hello ^s - goodbye`
.IP "\fB--raggedRight\fR" 4
.IX Item "--raggedRight"
Use ragged right margin in pretty-printing of
expressions and types.
.IP "\fB--recompile_basislib, -scratch\fR" 4
.IX Item "--recompile_basislib, -scratch"
Recompile basis library from scratch. This option
is useful together with other options that control
code generation.
.IP "\fB--region_inference, -ri\fR" 4
.IX Item "--region_inference, -ri"
With this flag disabled, all values are allocated in
global regions.
.IP "\fB--region_profiling, -prof\fR" 4
.IX Item "--region_profiling, -prof"
Enable region profiling. Object code stemming
from compiling a program with region profiling enabled
is instrumented with profiling information. When a program
compiled with region profiling enabled is run, the program
produces a profile file run.rp, which can then be read
by the profiling tool rp2ps that comes with the MLKit to
produce profiling graphs of various forms.
.IP "\fB--regionvar N\fR" 4
.IX Item "--regionvar N"
Uses the provided number as the id of the first
generated region variable. When this option is
provided together with the -c option, a file f.rv
is written in the MLB/ directory with two numbers
in it: the id for the first region variable
generated and the id for the last region variable
generated. The number given must be greater than
any id for a top-level region/effect variable (>9).
.IP "\fB--register_allocation\fR" 4
.IX Item "--register_allocation"
Perform register allocation. Without register allocation
enabled, programs run somewhat slower--but they run and
you save about 15 percent on compile time.
.IP "\fB--report_file_sig, -sig\fR" 4
.IX Item "--report_file_sig, -sig"
Report signatures for each file read.
.IP "\fB--repository, -rep\fR" 4
.IX Item "--repository, -rep"
Use in-memory repository to avoid unnecessary
recompilation. This flag should be disabled when
compiling mlb-files, which make use of the file system
as a repository.
.IP "\fB--safeLinkTimeElimination\fR" 4
.IX Item "--safeLinkTimeElimination"
Threat this module as a library in the sense that
the code can be eliminated if it is not used.
.IP "\fB--specialize_recursive_functions\fR" 4
.IX Item "--specialize_recursive_functions"
Specialise recursive functions. Use the option
maximum_specialise_size to control which functions
are specialised. If this flag is on, functions that are
applied only once are specialised, no matter the setting
of maximum_specialise_size (Lambda Expression Optimiser).
.IP "\fB--statistics_after_optimisation\fR" 4
.IX Item "--statistics_after_optimisation"
Report optimisation statistics after optimisation of
Lambda Expression.
.IP "\fB--strip\fR" 4
.IX Item "--strip"
If enabled, the Kit strips the generated executable.
.IP "\fB--tag_pairs\fR" 4
.IX Item "--tag_pairs"
Use a tagged representation of pairs for garbage
collection. Garbage collection works fine with a
tag-free representation of pairs, so this option
is here for measurement purposes.
.IP "\fB--tag_values, -tag\fR" 4
.IX Item "--tag_values, -tag"
Enable tagging of values as used when garbage
collection is enabled for implementing pointer
traversal.
.IP "\fB--type_check_lambda\fR" 4
.IX Item "--type_check_lambda"
Type check lambda expression prior to performing region
inference. Type checking is very fast and for normal use
you should not disable this option. Type checking
intermediate forms is very powerful for eliminating bugs
in the compiler.
.IP "\fB--unbox_function_arguments\fR" 4
.IX Item "--unbox_function_arguments"
Unbox arguments to fix-bound functions, for which the
argument `a' is used only in contexts `#i a'. All call 
sites are transformed to match the new function (Lambda
Expression Optimiser).
.IP "\fB--uncurrying, -uncurry\fR" 4
.IX Item "--uncurrying, -uncurry"
Enable uncurrying of curried functions. The uncurried
function takes its arguments unboxed in registers or
on the stack. For partial applications and non-
application uses of the function, appropriate eta-
expansions are applied.
.IP "\fB--version, -v, -V\fR" 4
.IX Item "--version, -v, -V"
Print MLKit version information and exit.
.IP "\fB--warn_on_escaping_puts\fR" 4
.IX Item "--warn_on_escaping_puts"
Enable the compiler to issue a warning whenever a 
region type scheme contains a put effect on a region
that is not quantified.
.IP "\fB--width N, -w N\fR" 4
.IX Item "--width N, -w N"
Column width used when pretty printing intermediate code.
.SH EXIT STATUS
Exits with status 0 on success and -1 on failure..SH ENVIRONMENT
An MLKit library install directory must be provided in an environment variable SML_LIB or as a path-definition in either the system wide path-map /etc/mlkit/mlb-path-map or in the user's personal path-map ~/.mlkit/mlb-path-map..SH FILES
.I /etc/mlkit/map
.RS
User configuration
.SH CREDITS
The MLKit (version 2 and beyond) was developed by Lars Birkedal, Martin Elsman, Niels Hallenberg, Tommy H. Olesen, Mads Tofte, and Carsten Varming. People who have contributed with bug-fixes and improvements include Peter Bertelsen, Ken Friis Larsen, Henning Niss, and Peter Sestoft. Nick Rothwell and David N. Turner took part in the development of the MLKit version 1.
.SH SEE ALSO
See the MLKit manual "Programming with Regions in the MLKit", available from the MLKit home page

.B http://www.itu.dk/research/mlkit

The home page also provides an overview of which parts of the Standard ML Basis Library the MLKit implements, along with download and installation instructions.