# -----------------------------------------------------------
# Build the MLKit including tools, runtime systems, etc.
# -----------------------------------------------------------

SHELL=@SHELL@

# Some commands
MKDIR=@top_srcdir@/mkinstalldirs
LIBDIR=@top_srcdir@
INSTALL=@INSTALL@
INSTALLDATA=@INSTALL_DATA@
CLEAN=rm -rf MLB PM CM *~ .\#* a.out run
CLEAN_MLB=rm -rf MLB

BINDIR=@top_srcdir@/bin

include @top_srcdir@/Makefiledefault

ARCH-OS=x86-linux
#ARCH-OS=x86-bsd
HEAP2EXEC=heap2exec/heap2exec heap2exec/run.$(ARCH-OS)

GENOPCODES_TARGETS=Runtime/Prims.c Runtime/PrimsNsSml.c \
 Runtime/KamInsts.h Runtime/KamInsts.c Runtime/jumptbl.h \
 Compiler/Backend/KAM/BuiltInCFunctionsKAM.sml \
 Compiler/Backend/KAM/OPCODES_KAM.sml Compiler/Backend/KAM/OpcodesKAM.sml

GENOPCODES_SOURCES=Compiler/Backend/KAM/BuiltInCFunctions.spec \
 Compiler/Backend/KAM/BuiltInCFunctionsNsSml.spec \
 Compiler/Backend/KAM/BuiltInCFunctionsApSml.spec \
 Compiler/Backend/KAM/KamInsts.spec

# Whether request profiling is enabled 
REQUEST_PROFILING=
#REQUEST_PROFILING=true

mlkit: mlkit_kit

.PHONY: mlkit_kit
mlkit_kit: basics rp2ps tester kitbench mlbmake Parsing/Topdec.lex.sml
#	if [ -d Tools/MlbMake/MLB ]; then rm -Rf Tools/MlbMake/MLB; fi
	$(MAKE) -C Runtime runtimeSystem.a
	$(MAKE) -C Runtime runtimeSystemProf.a
	$(MAKE) -C Runtime runtimeSystemGC.a
	$(MAKE) -C Runtime runtimeSystemGCProf.a
	$(MAKE) -C Runtime runtimeSystemGenGC.a
	$(MAKE) -C Runtime runtimeSystemGenGCProf.a
#	$(MAKE) -C Runtime runtimeSystemGCTP.a
#	$(MAKE) -C Runtime runtimeSystemGCTPProf.a
#	$(MAKE) -C Runtime runtimeSystemTag.a
	$(MLCOMP) -output mlkit Compiler/native.mlb
	$(INSTALL) -p mlkit $(BINDIR)

mlkit_kam: mlkit_kam_kit

.PHONY: mlkit_kam_kit
mlkit_kam_kit: basics tester kitbench Parsing/Topdec.lex.sml
	$(MAKE) -C Runtime kam
	$(MLCOMP) -output mlkit_kam Compiler/kitkam.mlb
	$(INSTALL) -p mlkit_kam $(BINDIR)

.PHONY: mlkit_nj
mlkit_nj: basics rp2ps tester kitbench mlbmake Parsing/Topdec.lex.sml
	$(MAKE) -C Runtime runtimeSystem.a
	$(MAKE) -C Runtime runtimeSystemProf.a
	$(MAKE) -C Runtime runtimeSystemGC.a
	$(MAKE) -C Runtime runtimeSystemGCProf.a
	$(MAKE) -C Runtime runtimeSystemGenGC.a
	$(MAKE) -C Runtime runtimeSystemGenGCProf.a
#	$(MAKE) -C Runtime runtimeSystemGCTP.a
#	$(MAKE) -C Runtime runtimeSystemGCTPProf.a
#	$(MAKE) -C Runtime runtimeSystemTag.a
	echo 'use "build.sml";' | sml
	$(HEAP2EXEC) $(BINDIR)/kit.$(ARCH-OS) $(BINDIR)/mlkit

.PHONY: mlkit_kam_nj
mlkit_kam_nj: basics tester kitbench Parsing/Topdec.lex.sml
	$(MAKE) -C Runtime kam
	echo 'use "build_kam.sml";' | sml
	$(HEAP2EXEC) $(BINDIR)/kit.$(ARCH-OS) $(BINDIR)/mlkit_kam

smlserver: smlserver_kit

smlserver_kit: basics mlbmake Parsing/Topdec.lex.sml
	$(MAKE) -C Tools/MspComp
	$(MAKE) -C Tools/UlWrapUp
#	$(MAKE) -C Tools/MlbMake
	$(MAKE) -C Runtime runtimeSystemKamApSml.o
#	cd SMLserver; $(MAKE) REQUEST_PROFILING=$(REQUEST_PROFILING)
	$(MAKE) -C SMLserver/apache
	$(MLCOMP) -output smlserverc Compiler/smlserver.mlb
	$(INSTALL) -p smlserverc $(BINDIR)
#	rm -f $(BINDIR)/smlserverc
#	cd .. && echo '#!/bin/sh' > bin/smlserverc
#	cd .. && echo `pwd`/bin/smlserverc.$(ARCH-OS) `pwd` \$$* >> bin/smlserverc
#	chmod a+x $(BINDIR)/smlserverc

smlserver_nj: basics mlbmake Parsing/Topdec.lex.sml
	$(MAKE) -C Tools/MspComp
	$(MAKE) -C Tools/UlWrapUp
#	$(MAKE) -C Tools/MlbMake
#	cd Runtime; $(MAKE) runtimeSystemKamNsSml.o
	$(MAKE) -C Runtime runtimeSystemKamApSml.o
#	cd SMLserver; $(MAKE) REQUEST_PROFILING=$(REQUEST_PROFILING)
	$(MAKE) -C SMLserver/apache
	echo 'use "build_web.sml";' | sml
	$(HEAP2EXEC) $(BINDIR)/kit.$(ARCH-OS) $(BINDIR)/smlserverc
#	rm -f $(BINDIR)/smlserverc
#	cd .. && echo '#!/bin/sh' > bin/smlserverc
#	cd .. && echo `pwd`/bin/smlserverc.$(ARCH-OS) `pwd` \$$* >> bin/smlserverc
#	chmod a+x $(BINDIR)/smlserverc

barry: basics Parsing/Topdec.lex.sml
	echo 'use "build_barry.sml";' | sml
	$(HEAP2EXEC) $(BINDIR)/kit.$(ARCH-OS) $(BINDIR)/barry.$(ARCH-OS)
	rm -f $(BINDIR)/barry
	cd .. && echo '#!/bin/sh' > bin/barry
	cd .. && echo `pwd`/bin/barry.$(ARCH-OS) `pwd` \$$* >> bin/barry
	chmod a+x $(BINDIR)/barry

basics: genopcodes heap2exec mlkit-mllex

genopcodes: $(GENOPCODES_TARGETS)

$(GENOPCODES_TARGETS): $(GENOPCODES_SOURCES)
	$(MKDIR) $(BINDIR)
	$(MAKE) -C Tools/GenOpcodes BINDIR=../../$(BINDIR)
# kitgen_opcodes assumes it's run from the src-directory
	$(BINDIR)/kitgen_opcodes

rp2ps:
	$(MAKE) -C Tools/Rp2ps

tester:
	$(MAKE) -C Tools/Tester

mlbmake:
	$(MAKE) -C Tools/MlbMake Configuration.sml

kitbench:
	$(MAKE) -C Tools/Benchmark

.PHONY: mlkit-mllex
mlkit-mllex:
	$(MAKE) -C Tools/ml-lex

Parsing/Topdec.lex.sml: Parsing/Topdec.lex
	$(BINDIR)/mlkit-mllex Parsing/Topdec.lex

heap2exec: heap2exec/heap2exec
	cp heap2exec/heap2exec.copy heap2exec/heap2exec;
	cp heap2exec/run.x86-linux.copy heap2exec/run.x86-linux

#$(MAKE) uncommented by NH because heap2exec doesn't compile on FC3

clean:
	$(CLEAN) run $(GENOPCODES_TARGETS)
	cd Pickle && $(CLEAN)
	cd Common && $(CLEAN)
	cd Common/EfficientElab && $(CLEAN)
	cd Compiler && $(CLEAN)
	cd Parsing && $(CLEAN)
	cd Manager && $(CLEAN)
	cd Edlib && $(CLEAN)
	cd heap2exec && $(MAKE) clean
	cd Runtime && $(MAKE) clean
	cd Tools/MspComp && $(MAKE) clean
	cd Tools/Tester && $(MAKE) clean
	cd Tools/Rp2ps && $(MAKE) clean
	cd Tools/MlbMake && $(MAKE) clean
	cd Tools/GenOpcodes && $(MAKE) clean
	cd Tools/Benchmark && $(MAKE) clean
	$(MAKE) -C Tools/UlWrapUp clean
	cd Compiler && $(CLEAN)
	cd Compiler/Backend && $(CLEAN)
	cd Compiler/Backend/Dummy && $(CLEAN)
	cd Compiler/Backend/HpPaRisc && $(CLEAN)
	cd Compiler/Backend/X86 && $(CLEAN)
	cd Compiler/Backend/KAM && $(CLEAN)
	cd Compiler/Backend/Barry && $(CLEAN)
	cd Compiler/Regions && $(CLEAN)
	cd Compiler/Lambda && $(CLEAN)
	cd SMLserver && $(CLEAN) nssml.so *.o
	$(MAKE) -C SMLserver/apache clean
	rm -f mlkit

clean_mlb:
	cd ../basis && $(CLEAN_MLB)
	$(CLEAN_MLB)
	cd Pickle && $(CLEAN_MLB)
	cd Common && $(CLEAN_MLB)
	cd Common/EfficientElab && $(CLEAN_MLB)
	cd Compiler && $(CLEAN_MLB)
	cd Compiler/Lambda && $(CLEAN_MLB)
	cd Compiler/Regions && $(CLEAN_MLB)
	cd Compiler/Backend && $(CLEAN_MLB)
	cd Compiler/Backend/Dummy && $(CLEAN_MLB)
	cd Compiler/Backend/X86 && $(CLEAN_MLB)
	cd Compiler/Backend/KAM && $(CLEAN_MLB)
	cd Compiler/Backend/Barry && $(CLEAN_MLB)
	cd Parsing && $(CLEAN_MLB)
	cd Manager && $(CLEAN_MLB)
	cd Edlib && $(CLEAN_MLB)
	cd Tools/MlbMake && $(CLEAN_MLB)

grm:
	cd Parsing && ml-lex Topdec.lex; ml-yacc Topdec.grm

# ----------------------------------------------------------
# Support for measuring the code blowup resulting from
# compiling functors in the MLKit; not used by install!
# ----------------------------------------------------------

FILE = /home/mael/kit/src/bdys.txt
LINES = /home/mael/kit/src/lines.mael.sml


bdys:
	(cd Common/PM/RI && wc -l *.bdy > $(FILE))
	(cd Common/EfficientElab/PM/RI && wc -l *.bdy >> $(FILE)) 
	(cd Parsing/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Compiler/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Compiler/Lambda/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Compiler/Regions/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Compiler/Kam/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Compiler/Cfg/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Compiler/C/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Compiler/Backend/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Compiler/Backend/HpPaRisc/PM/RI && wc -l *.bdy >> $(FILE))	
	(cd Manager/PM/RI && wc -l *.bdy >> $(FILE))	

lines:
	(cd Common && cat *.sml > $(LINES))
	(cd Common/EfficientElab && cat *.sml >> $(LINES)) 
	(cd Parsing && cat *.sml >> $(LINES))	
	(cd Compiler && cat *.sml >> $(LINES))	
	(cd Compiler/Lambda && cat *.sml >> $(LINES))	
	(cd Compiler/Regions && cat *.sml >> $(LINES))	
	(cd Compiler/Kam && cat *.sml >> $(LINES))	
	(cd Compiler/Cfg && cat *.sml >> $(LINES))	
	(cd Compiler/C && cat *.sml >> $(LINES))	
	(cd Compiler/Backend && cat *.sml >> $(LINES))	
	(cd Compiler/Backend/HpPaRisc && cat *.sml >> $(LINES))	
	(cd Manager && cat *.sml >> $(LINES))
	wc -l $(LINES)
	rm -f $(LINES)
