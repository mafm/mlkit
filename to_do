                          A To-Do List

[mael] Only allow entries in schript-files that do not alter
calling-conventions, runtime representations, and so on. Profiling can
be dealt with by introducing more bindings in repositories; such extra
bindings in repositories makes it possible to enable and disable
profiling without recompiling everything.


[mael] Currently, we do not treat multiple declarations of the same
functor identifier in the same project. We can allow this; but we
cannot allow a functor identifier to be declared more than once in a
source file.


[mael] Allow ``local'' source files in projects.  Allow ``inlining'' of
functors. Syntax:

     bdy ::= inline funidseq                     functor inlining
          |  local bdy in bdy end                local
	  |  bdy bdy |  _                        sequential
          |  file.sml | file.sig | file.fun      source file
          |  file.o                              precompiled object
          |  file.grm                            yacc source file
          |  file.lex                            lex source file


[mael] Eliminate object code that is never used. We cannot eliminate
object code for units with side-effects, however.


[mael] It seems that kam variables are local to each target unit;
currently, however, we allocate a ``global'' store (in data space) for
these variables and this store grows, infinitely. Instead, we can
associate spilled registers to DataLabel's (KAM
terminology). DataLabel's are already supported by KbpToHpPa. Only a
few changes seem necessary (e.g., space is currently allocated
(statically) for each store into the slot.) We also need to modify
register allocation, such that spilled variables are associated with
DataLabel's.


[mael] Allow for adjustment of in-lining strategy in Optimiser. Add a
function add_int_entry_to_menu, or so, to Flags.


[mael] Declare polymorphic eq. in the initial basis, and make it
impossible to redeclare equality; if equality is in the initial basis
then in-lining happens automatically.


[mael] Get TestEnv performance test to work properly under HPUX
10. The problem is that the UNIX program `top' generates unparsable
output under HPUX 10.

[mael] Implementation of Real.round on systems that do not have rint()
(i.e., systems based on gcc's library). Real.round is broken in MosML,
so we cannot copy the code.

[mael] How are we going to model the differences between the
specification of the Math structure and the semantics of
/usr/include/math.h? Until now I think that we should just do whatever
math.h does; MosML does not implement NaN, posInf, and negInf;
instead, MosML raises Overflow when the specification suggests to
return NaN, posInf, or negInf.


[mael] Why are regions passed to primitive functions in the runtime
system not tested for resetting automatically (in CompLamb);
currently, the user must do the resetting in the C function. Is there
a reason?


[mael] Delete the TestEnv/Output_X_on_Y directories and replace them
by one directory ExpectedOutput. The output from running the tests
should be the same on different machines. Moreover, the output should
be the same even if profiling is enabled (profiling messages should be
directed to stdErr).
