VERSION 3


ERROR:
SYMPTOM:
TESTFILE:
PRIORITY: (HIGH|MEDIUM|LOW)
REPORTED BY: (MT|MAEL|FAXE) + date
TO BE FIXED BY: (MT|MAEL|FAXE)


BUGS:

ERROR: bug in rp2ps?
SYMPTOM: naar jeg proever 

      ../bin/rp2ps -region -name life -sampleMax 1000 -eps 150 mm

produceres der en PostScript fil, som kun viser et delvist billede.
Derimod virker -sampleMax 500 fint!

TESTFILE: ~tofte/issmkit/kit/kitdemo/badprofile.rp.  (omdoeb den til profile.rp)
PRIORITY: HIGH
REPORTED BY: MT, Aug 26, 1998
TO BE FIXED BY: FAXE?



WAIT

Implement some kind of project reuse; it currently takes too long for
the manager to find out that the code for the basis library can be
reused. The problem is that the result basis for the basis library
project is reconstructed, from the result bases for the individual
sources of the library, every time the project is reused.

It seems that kam variables are local to each target unit; currently,
however, we allocate a global store (in data space) for these
variables and this store grows, infinitely, when the project is
recompiled. Instead, we can associate spilled registers to DataLabel's
(KAM terminology). DataLabel's are already supported by
KbpToHpPa. Only a few changes seem necessary (e.g., space is currently
allocated (statically) for each store into the slot.) We also need to
modify register allocation, such that spilled variables are associated
with DataLabel's.

Variables that occur free in a program unit are associated with
labelled slots in the data segment of the final executable; thus,
these variables need not be stored in closures. It suffices to fetch
them from the data segment.

Make recompilation dependent on a notion of `compiler configuration'
(list of entry-flag pairs); in this way, we can ensure that linking
will always succeed even if the compiler configuration changes. A
configuration should include entries such as ("tag_values", BOOL
false), and so on.

Currently, we do not treat multiple declarations of the same functor
identifier in the same project. We can allow this; but we cannot allow
a functor identifier to be declared more than once in a source file.

Allow ``local'' source files in projects.  Allow ``inlining'' of
functors. Syntax:
     bdy ::= inline funidseq                     functor inlining
          |  local bdy in bdy end                local
	  |  bdy bdy |  _                        sequential
          |  file.sml | file.sig | file.fun      source file
          |  file.o                              precompiled object
          |  file.grm                            yacc source file
          |  file.lex                            lex source file

Declare polymorphic eq. in the initial basis, and make it impossible
to redeclare equality; if equality is in the initial basis then
in-lining happens automatically.

Get TestEnv performance test to work properly under HPUX 10. The
problem is that the UNIX program `top' generates unparsable output
under HPUX 10. Are there any system calls that can do the same job as
`top'?

How are we going to model the differences between the specification of
the Math structure and the semantics of /usr/include/math.h? For now,
I think that we should just do whatever math.h does; MosML does not
implement NaN, posInf, and negInf; instead, MosML raises Overflow when
the specification suggests to return NaN, posInf, or negInf.

Implementation of Real.round on systems that do not have rint() (i.e.,
systems based on gcc's library). Real.round is broken in MosML, so we
cannot copy the code.

Why are regions that are passed to primitive functions in the runtime
system not tested for resetting automatically (in CompLamb);
currently, the user must do the resetting in the C function. Is there
a reason?


DONE



ERROR:
SYMPTOM:
TESTFILE: (file in TestEnv, added to acceptance test)
PRIORITY: (HIGH|MEDIUM|LOW)
REPORTED BY: (MT|MAEL|FAXE) + date
TO BE FIXED BY: (MT|MAEL|FAXE)
FIXED BY: (MT|MAEL|FAXE) + date


[(ME 1998-08-21): Eliminate generated object code that is never used
by applying a backward use-analysis. We cannot eliminate object code
for units with side-effects, however.]

[(ME 1998-08-21): Delete the TestEnv/Output_X_on_Y directories and
replace them by one directory expected_output. The output from running
the tests should be the same on different machines. Moreover, the
output should be the same even if profiling is enabled (profiling
messages should be directed to stdErr).]









