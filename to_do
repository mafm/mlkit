mael 2005-11-29: Things needed for the next release:

   * mael 2005-11-29: Fix bug related to where .bdy-files are
     stored. They should be stored in the MLB-directory of the
     functor-hosting mlb-file (Martin)
       Solution: use OS.Path.dir (Flags.get_string_entry "output") as
	a prefix path to the bdy-file in IntModules.sml.
       Status: Fixed. mael 2005-12-04
   * mael 2005-11-29: Update Basis Library to a reasonable degree.

   * mael 2005-11-29: Fix bug related to recognizing already compiled
     mlb-files (Martin)
 
   * mael 2005-11-29: MLKit Manual update (Martin)

   * mael 2005-11-29: SMLserver Manual update (Martin)

   * mael 2005-11-29: Makefile target for generating binary package
     (tgz) with INSTALL file

   * mael 2005-11-29: Makefile target for generating source package
     (tgz) with INSTALL_SRC file

   * mael 2005-12-01: papers/smlserver/root.tex (Carsten): Almost Done
        1) Revise the text in table in Section 3.8 OK
        2) Run through Sections 2.1--2.4. What should the directory
           structure of smlserver_demo be? It would be cool if it is
           possible to compile scs.
        3) Update log-line of Section 3.9. OK CV
        4) Update WEB_CACHE signature of Section 6.6. OK CV
        5) Update NS_DB signature of Section 7.2 OK CV
        6) Update Section 9.6?? OK CV
        7) Update Section 10.1?? OK CV
        8) Appendix A: insert part of sample httpd.conf file. 
        9) Delete Appendix B & C; wouldn't this be ok?
       10) Appendix E appears not to be upto date.

mael 2005-10-28: Fix bug in gengc: Errors when bootstrapping

mael 2005-10-26: Try compile the MLKit with MLTon.

mael 2005-10-25: Add necessary Posix-support needed to compile
Kittester with MLKit. DONE (Varming)

mael 2005-10-25: MLB-make needs to check the integrity (e.g., size) of
.{eb1,eb,lnk,rev}-files before concluding that recompilation is not
needed. It is sufficient to check the integrity of lnk-files since
lnk-files are generated last. DONE.

mael 2005-10-04: Better mlkit error reporting in case a src-file does
not exist. Also, before src-files in an mlb-file are compiled, check
that the files do indeed exist.

varming 2005-09-05: Upgraded SMLserver to Apache. Started work on 
configuration prior to compilation (autoconf).

 > cd kit
 > autoconf -o configure configure.ac
 > autoheader configure.ac
 > ./configure

Generates apropriate Makefiles to build the kit. To build SMLserver
try configure --enable-SMLserver --with-apache=/path/to/apache 
To build oracle driver configure --enable-SMLserver 
--with-apache=/path/to/apache --with-oracle=/path/to/oracle

mael 2005-09-02: Both "make mlkit", "make smlserver", and "make
mlkit_kam" works. Running the regression tests on mlkit and mlkit_kam
also works:

 > cd kit/test
 > export SML_LIB=/home/mael/mlkit/kit
 > rm -rf MLB ../basis/MLB
 > make test_mlkit
 > rm -rf MLB ../basis/MLB
 > make test_kam

To run "make smlserver", first the AOLserver rpm must be
installed. Then, after the build of smlserverc, do as follows:

   cd kit/smlserver_demo/www
   export SML_LIB=/home/mael/mlkit/kit
   ../../bin/smlserverc demo.mlb

This should construct a file www/MLB/demo.ul. Currently, msp-files are
not supported.

Things to do:

  - Eliminate the MLKit menu system (Martin) 
  - Upgrade to Apache. (Carsten)
  - Setup and test separate compilation mechanisms
  - Setup regression testing for different compile time options, such 
    as "-gc", "-prof", "-gc -prof" (Martin)

  - Add support for region profiling. Add option "-regvar N" to mlkit
    executable and add support for passing a global counter around in
    the MLB-system. (Martin - DONE mael 2005-10-25)
  - Add support for msp-files. (Martin - DONE mael 2005-10-25)

Notice that pm-files are no longer supported.

mael 2004-12-14: The definition of a "basis closure" is
inappropriately strong. More information than necessary is included in
the closure, which means that serialized bases take up a large amount
of space on disk.

mael 2005-05-27: Things to do:

 - With different combinations of options, code should be stored in
   different MLB sub-directories. There are different kinds of options:

    1) Options that influence the generated code and which runtime system
       is used:
         region profiling, gc, gengc, tagging schemes

    2) Options that influence the generated code, but not which runtime
       system is used:
         lambda optimizations, enabling/disabling of storage mode
         analysis/multiplicity inference

    3) Options that do not influence the generated code:
         pretty-printing options
         verbosity options (chat,debug)
       
   For computing a subdirectory of MLB to store target code, etc., we
   sort all options in category (1) and (2); call this list of options
   L and the list of option values V.

    val s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_"
    val sz = size s (*=64*)
   
   This allows for the encoding of 6 option values for each character.
   Divide V into lists of 6-tuples (pad with true values for possible
   missing entries in the last tuple). Interpret each tuple as a
   number between 0 and 64 (binary interpretation;
   TRUE=1;FALSE=0). Index into s to get a character for each 6-tuple.


  mlbmake: Make tool that calls mlkit for each source file in the
           mlb-file hierachy. When a single sml-file f.sml is given as
           argument to mlbmake, the following mlb-file is constructed
           and compiled: 'local $(SML_LIB)/basis/basis.mlb in f.sml end'.

mael 2005-01-31: Write MLKit users manual including:
   Compiling
     MLB files
   Interfacing with C
     Calling C from ML
     Calling ML from C
   Bootstrapping
   Profiling
   Garbage Collection

 Should this be in a Wiki?  

mael 2004-12-13: Status on MLB files.

It is now possible to compile the MLKit itself using
MLB-files. Unfortunately, a segmentation fault occurs when compiling
General.sml with the generated executable - compilation of Initial.sml
goes well. 

Some things to do:

  * Check for cycles in MLB-graph.

  ** fix bug (see above)

  * rewrite tests to use mlb-files instead of pm-files

  * modify test-utility to call mlbmake instead of mlkit when
    the argument is an mlb-file. Alternatively, exec mlbmake from
    within mlkit when the argument is an mlb-file.

  * Extend mlbmake to take a single sml-file "file.sml" as
    argument. Its semantics should then be similar to
      local $(SML_LIB)/basis/basis.mlb in file.sml end 

mael 2004-10-30 Plan for mlb-files implementation in the MLKit.

Status: It is now possible to compile simple mlb-files and have
export-basis information stored on disk for each compilation unit. A
"dependency analysis", which is run before compilation units are
compiled, determines which exported export-bases a compilation unit
depends on.

Things to do:

 1) Move the MLB implementation outside of the MLKit, so that it can
    be used also by the Moscow ML compiler. Figure out what
    command-line features should be supported by the MLKit executable
    (or Moscow ML):

        mlkit -c -o myfile -load u1.eb ... uN.eb file.sml   // generates myfile.{eb,o,li}
        mlkit -o a.out -link u1 ... uN                   // generates a.out

 2) Optimize loading of export bases so that only infix and elaboration
    bases are loaded for all {u1.eb ... uN.eb} in
         
        mlkit -o myfile -load u1.eb ... uN.eb file.sml

    After the infix and elaboration bases are loaded, the program unit
    can be parsed and elaborated into a typed abstract syntax
    tree. Once the program unit has been elaborated, free identifiers
    of the program unit can be found [Els98, Chapter 4]. From this
    information, the subset U of {u1,...,uN} necessary for compilation
    can be found.

Possible things to do
---------------------

mael 2003-03-05: better pretty-printing of type variables. In
particular, types with more than 20 (or so) type variables in them are
not nicely pretty-printed in error messages and signatures (e.g., '}
should instead be 'aa). Also, it would be great if we could reuse the
name of the type variable as it occurs in the source program (e.g.,
write 'kind instead of 'aa).

mael 2003-02-04: nicer pretty-printing of signatures (mlkit
-sig). Particularly, parameterized type constructors have an extra
space.

mael 2001-11-27: curry-compression: turn

    let f = \x.let g = \y.e1 in \z.e2
    in e3
    end

into

    let f = \x.\z.let g = \y.e1 in e2
    in e3
    end

Let C be the contexts defined by

    C[.] := .
          | let f = \x.e in C[.]
Turn
    let f = \x.C[\y.e1] in e2  
into
    let f = \x.\y.C[e1] in e2

mael 2001-11-13: turn curried functions into functions that take
  multiple arguments; build the closure at the call-site for those
  functions that are not fully applied:

    let f = \x1...\xn.e in (...(f e1)...en)  ==>
    let f = \<x1...xn>.e in f <e1,...,en>
      

mael 2001-11-12: better cross-module in-lining; support in-lining of
  non-closed functions.

mael 2001-11-12: don't built closures for top-level functions; all
  free variables of such functions are either (1) top-level functions,
  which by induction have no environment, or (2) top-level variables,
  which are statically allocated.

mael 2001-11-12: unboxed implementation of datatypes that
  have any number of nullary constructors but at-most three unary
  construtors that all take boxed arguments. With gc, only two unary
  constructors are allowed for the datatype to be implemented
  unboxed. Examples of datatypes that may be implemented unboxed
  include (1) The list datatype, (2) enumerations, (3) the Binary
  tree datatypes in kit/basis/Binarymap.sml,
  kit/basis/Binaryset.sml, kit/basis/Intmap.sml,
  kit/basis/Intset.sml, kit/basis/Polyhash.sml,
  kit/basis/Splaymap.sml, and kit/basis/Splayset.sml, (4)
  Patricia trees (kit/src/Common/IntFinMapPT.sml), and (5) Union Find
  data structure (kit/src/Compiler/Kam/UnionFindPoly.sml.)
  
mael 2001-11-12: unboxed implementation of datatypes that
  have only one unary constructor; in most cases this optimisation is
  captured by the unboxing mentioned above.
 
mael 2001-08-07: catch stack-overflow

mael 2001-08-03: man pages for mlkit and smlserver, rp2ps

mael 2001-08-03: colors in rp2ps output

Unsolved bugs
-------------
nh 2001-06-01: Fra url:
  http://www.it-c.dk/people/tofte/eksperiment1/index.html

    The results were (sorted by decreasing speed):

    1.4,393 secs: compiler: MLKit; target code: no garbage collection (i.e., only regions) 
    2.4,802 secs: compiler: MLKit; target code: regions and garbage collection 
    3.6,3 secs: compiler: mosml; target code: garbage collection, no regions 
    4.8,131 secs: compiler: MLKit; target code: regions, garbage collection and profiling.
       Check the region profile graph and the object profil of the largest region. (The program
       points in the latter graph do not seem to be right: maybe the same program points are
       used in the basis library and in the evaluation system code?.) 


                             VERSION 3


ERROR:
SYMPTOM:
TESTFILE:
PRIORITY: (HIGH|MEDIUM|LOW)
REPORTED BY: (MT|ME|FAXE) + date
TO BE FIXED BY: (MT|ME|FAXE)

=============================== BUGS ===============================
ERROR: CompileDec `val rec pat' error
SYMPTOM: Compilation crashes: 
           Impossible: CompileDec.compileREC.id_sigma
TESTFILE: kit/test/valrecpat.sml
PRIORITY: MEDIUM
REPORTED BY: ME 1999-04-12
TO BE FIXED BY: ME
--------------------------------------------------------------------
ERROR: ElabDec `val rec pat' error
SYMPTOM: Elaboration fails to succeed (see The Def. page 24)
TESTFILE: test/valrecpat2.sml
PRIORITY: MEDIUM
REPORTED BY: ME 1999-04-12
TO BE FIXED BY: ME
=============================== WAIT ===============================

Large elaboration bases are annotated on the ast (functor bindings)
during elaboration. Such annotated bases cause opacity elimination to
be slow when compiling large programs; opacity elimination applies
realisations to ast annotated objects. To improve speed of
compilation, we should restrict the annotated bases to those
identifiers that occur free in the functor binding. Is it possible to
do this restriction during the pass for finding free identifiers
(FreeIds)?
 
Implement some kind of project reuse; it currently takes too long for
the manager to find out that the code for the basis library can be
reused. The problem is that the result basis for the basis library
project is reconstructed, from the result bases for the individual
sources of the library, every time the project is reused.

Variables that occur free in a program unit are associated with
labelled slots in the data segment of the final executable; thus,
these variables need not be stored in closures. It suffices to fetch
them from the data segment.

Currently, we do not treat multiple declarations of the same functor
identifier in the same project. We can allow this; but we cannot allow
a functor identifier to be declared more than once in a source file.

Allow in-lining of functors and pre-processing through
ML-Yacc and ML-Lex. Syntax:

     bdy ::= inline funidseq                     functor inlining
          |  local bdy in bdy end                local
	  |  bdy bdy |  _                        sequential
          |  file.sml | file.sig                 source file
          |  file.o                              precompiled object
          |  file.grm                            yacc source file
          |  file.lex                            lex source file

Declare polymorphic eq. in the initial basis, and make it impossible
to redeclare equality; if equality is in the initial basis then
in-lining happens automatically.

How are we going to model the differences between the specification of
the Math structure and the semantics of /usr/include/math.h? For now,
I think that we should just do whatever math.h does; MosML does not
implement NaN, posInf, and negInf; instead, MosML raises Overflow when
the specification suggests to return NaN, posInf, or negInf.

Implementation of Real.round on systems that do not have rint() (i.e.,
systems based on gcc's library). Real.round is broken in MosML, so we
cannot copy the code.

Why are regions that are passed to primitive functions in the runtime
system not tested for resetting automatically (in CompLamb);
currently, the user must do the resetting in the C function. Is there
a reason? What about Mogensens idea about resetting?

============================= DONE ================================

ERROR:
SYMPTOM:
TESTFILE: (file in TestEnv, added to acceptance test)
PRIORITY: (HIGH|MEDIUM|LOW)
REPORTED BY: (MT|ME|FAXE) + date
TO BE FIXED BY: (MT|ME|FAXE)
FIXED BY: (MT|ME|FAXE) + date

-------------------------------------------------------------------

mael 2003-04-16: Impossible: Environments.ExplicitTyVar_lookup occurs
for free type variables in type abbreviations. [Resolved, mael
2003-05-08.]

-------------------------------------------------------------------

mael 2001-08-07: improvement of pattern-matching; matching against a
pair ((a,b),c) can be optimized by reusing part of the path to a for
b.

-------------------------------------------------------------------

[(ME 1998-08-21): Eliminate generated object code that is never used
by applying a backward use-analysis. We cannot eliminate object code
for units with side-effects, however.]

-------------------------------------------------------------------

[(ME 1998-08-21): Delete the TestEnv/Output_X_on_Y directories and
replace them by one directory expected_output. The output from running
the tests should be the same on different machines. Moreover, the
output should be the same even if profiling is enabled (profiling
messages should be directed to stdErr).]

-------------------------------------------------------------------

[(ME 1998-09-26): Remove the problematic value space (valspace). It
seems that kam variables are local to each target unit; currently,
however, we allocate a global store (in data space) for these
variables and this store grows, infinitely, when the project is
recompiled. Instead, we can associate spilled registers to local slots
in each compilation unit.]

-------------------------------------------------------------------

ERROR: reelaboration of functor fails for overloading
SYMPTOM: 
	  Impossible: StatObject.instance'.fresh
	  Error while reconstructing functor body for Util
	  *** CRASH raised *

TESTFILE: ~mael/kit_projects/modules/util.sml
PRIORITY: HIGH
REPORTED BY: ME 1998-10-08
TO BE FIXED BY: ME
FIXED BY: ME and MT
COMMENT: realisations were not meant to be applied to type schemes for
overloaded functions. However, Elsmans implementation of opacity
elimination applies realisations to bases annotated in the ast
during elaboration.

-------------------------------------------------------------------

ERROR: basis restriction crashes compilation
SYMPTOM: 
  [compiling body of functor F (from project interp.pm) begin]
  problems with tyname environment
  tyname: t
  is not in the domain of the environment:
  ...
TESTFILE: ~mael/kit_projects/modules/interp.pm
PRIORITY: HIGH
REPORTED BY: ME 1998-10-12
TO BE FIXED BY: ME
FIXED BY: ME 1998-10-12
COMMENT: When restricting an interpretation basis, then associations
for tynames that occur free in the restricted interpretation functor
environment must be kept (ManagerObjects.IntBasis.restr).

-------------------------------------------------------------------

ERROR: bdy truncation
SYMPTOM: compilation crashes because .bdy file for 
functor is truncated:

                   structure F : sig end

TESTFILE: ~mael/kit_projects/modules/bdy_truncate.sml
PRIORITY: HIGH
REPORTED BY: ME 1998-10-12
TO BE FIXED BY: ME
FIXED BY: ME 1998-10-12
COMMENT: The position info annotated on the body of functor
bindings were wrong! I inserted a LETstrexp around the
body, so that the info on sigexp constraints did not have
to be altered (which would make error-reporting disastrous).

-------------------------------------------------------------------

ERROR: pattern match incorrect redundancy
SYMPTOM: The Kit reports that the second rule of the program

  fun f {a=1, b} = 1
    | f {b=1, a} = 2
    | f _ = 3

is redundant and generates incorrect code for the function.

TESTFILE: ~mael/kit_projects/modules/patterns.sml
PRIORITY: HIGH
REPORTED BY: ME 1998-10-13
TO BE FIXED BY: ME
FIXED BY: ME 1998-10-21
COMMENT: There was a problem with the ordering of record elements in 
patterns (file CompileDec.sml).

--------------------------------------------------------------------

[(ME 1998-10-21): Allow `local' source files in projects.  DONE]

--------------------------------------------------------------------

[(ME 1998-11-17): String.toString(s) does not surround s with
quotation marks, as String.string from the Edinburgh Library does. So,
we need to surround strings with quotation marks in prettyprinting,
and so on.  DONE]

--------------------------------------------------------------------

ERROR: ElabDec datatype error
SYMPTOM: Compilation crashes: 
           Impossible: Environments.ExplicitTyVar_lookup 
TESTFILE: kit/test/freedatatype.sml
PRIORITY: MEDIUM
REPORTED BY: ME 1999-05-05
TO BE FIXED BY: ME
FIXED BY: ME 2001-03-10
COMMENT: See the file kit/test/freedatatype.sml for comments.
--------------------------------------------------------------------
