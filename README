The ML Kit README file                                  March 5, 2001
http://www.it.edu/research/mlkit/

0. Introduction
---------------

This file describes how to install the ML Kit (from here on just the
Kit), a compiler for the programming language Standard ML. If you
intend to install the Kit on a RedHat Linux Box, consider using one of
the RPM's available from the Kit web site.

Features:

  * Region based memory management in combination with reference
    tracing garbage collection.
 
  * All of Standard ML. The Kit compiles all of Standard ML, including
    Modules, as specified by the Definition of Standard ML. The Kit
    also supports large parts of the Standard ML Basis Library.

  * Native backend for the x86 architecture and a bytecode backend 
    for creating portable code.

  * Compilation of large programs. The largest program the Kit
    has compiled is the Kit itself, which is approximately 80,000
    lines of code.

  * Documentation. A comprehensive guide on programming with regions
    in the ML Kit is available in the doc/ directory.


1. Installation Requirements
----------------------------
To install and use the ML Kit, you need a Linux box running Redhat
Linux 7.0 or similar. 

Unless you are installing one of the binary RPM distributions
available from the ML Kit web-site, you need Standard ML of New Jersey
version 110.0.6 (or later) to compile the ML Kit sources. A link to
the home page for the Standard ML of New Jersey compiler is available
from the ML Kit home page. Once installed, the ML Kit will take up
around 25Mb of disk space, which includes documentation, example
files, and a pre-compiled Standard ML Basis Library.


2. Release Numbers
------------------
The Kit follows the convention that releases with odd minor release
numbers (e.g., 3.1.12) are experimental releases whereas releases with
even minor release numbers (e.g., 3.0.1) are stable releases. The
convention only applies to the minor number. If x.y.z is a release
number, y is called the minor release number.


3. Preparing for Building and Installation
------------------------------------------

In the following, except in the section on "Binary Distributions",
we assume that version 110.0.6 (or later) of Standard ML of New Jersey
is installed on your Linux box, such that the command "sml" is
available from the command line. We shall also assume that you have
downloaded the compressed tar-file named mlkit-x.y.z.tgz and placed it
somewhere on your system. You now have the option of installing the
version of the ML Kit with the native backend or the version with the
bytecode backend.


4. Building and Installing the ML Kit (Native Backend)
------------------------------------------------------

Assuming you have downloaded the tar-file mlkit-x.y.z.tgz as described
in the previous section, proceed as follows:

  * Unpack the sources. Execute the command

      % tar tzf mlkit-x.y.z.tgz

    This command creates the directory mlkit-x.y.z.

  * Build the ML Kit. Execute the commands:

      % cd mlkit-x.y.z
      % make mlkit

  * Install the ML Kit. If you have root access to your machine,
    execute

      # make install

    which installs the ML Kit in the /usr/local/mlkit-x.y.z 
    directory. Alternatively, if you want to install the ML Kit in
    your home directory, execute
   
      % make install INSTDIR_NATIVE=$(HOME)/mlkit-x.y.z
    
Once installed, make a personal copy of the kitdemo/ directory and try
compile the kitdemo/helloworld.sml program. The command

   % cd kitdemo
   % /usr/local/mlkit-x.y.z/bin/mlkit helloworld.sml

should create a file called run (placed in the working directory)
that, when executed, should print a greeting from the Kit.


5. Building and Installing the ML Kit (Bytecode Backend)
--------------------------------------------------------

To build and install a version of the ML Kit that uses the bytecode
backend, exchange the make commands in the previous section with

   % make mlkit_kam

and 

   # make install_kam

which installs the ML Kit in the /usr/local/mlkit-kam-x.y.z directory;
it is thus possible to have both a version of the ML Kit that uses the
native backend and a version of the ML Kit that uses the bytecode
backend installed at the same time. If you do not have root-access to
the machine, you can install the ML Kit in your home directory, by
executing
   
   % make install_kam INSTDIR_KAM=$(HOME)/mlkit-kam-x.y.z
    
Once installed, make a personal copy of the kitdemo/ directory and try
compile the kitdemo/helloworld.sml program. The command

   % cd kitdemo
   % /usr/local/mlkit-kam-x.y.z/bin/mlkit_kam helloworld.sml

should create a file called run (placed in the working directory)
that, when executed, should print a greeting from the Kit.


6. Binary Distributions
-----------------------

RPM's are not yet available.


7. Support for Other Platforms and How You Can Help
---------------------------------------------------

Currently, only the Linux/x86 platform is supported. We hope to port
the bytecode interpreter to run on other platforms as well. If you
want to help port the runtime system to other platforms, please let us
know; the runtime system and bytecode interpreter is written in C (see
the src/RuntimeWithGC/ directory in the source distribution.)

For the native x86 backend, the Kit calls the gcc compiler to assemble
and link the x86 code files it generates. A native backend for the HP
PA-RISC architecture is available, but not supported. We do not plan
to support other native backends than the x86 backend. Suggestions for
improving (e.g., by peep-hole optimization) the x86 assembler code
generated by the x86 native backend are very much welcomed; the flag
--delete_target_files can be used to disable the deletion of the
.s-files generated by the backend.


8. VCG
------

The VCG tool, which is used to show region flow graphs, can be found at

    http://www.cs.uni-sb.de/RW/users/sander/html/gsvcg1.html


9. Comments and Bug Reports
---------------------------

Please see the www site:

   http://www.it.edu/research/mlkit/


10. Known Bugs and Limitations
------------------------------

Arithmetic and Trigonomitric functions in Math module:
  The implementation uses the C functions specified in math.h.
  Unfortunately, these C functions are platform dependent and 
  do not always return NaN precisely when the Basis
  Library stipulates that they should.

Polymorphic equality:

  Polymorphic equality is implemented only for "regular" data
  types. A datatype binding
 
     tyvarseq_1 tycon_1 = conbind_1 AND ... AND tvseq_n tycon_n = conbind_n

  is {\em regular\/} iff all occurrences of tycon_i, i \in {1,...,n}
  in {conbind_1, ..., conbind_n} are in the context 

     tyvarseq_i tycon_i

-------

Have fun!