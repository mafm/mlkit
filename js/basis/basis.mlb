(* Initial allows for other modules to be discharged at link time *)

local
    Initial.sml
    basis General = 
      bas 
        GENERAL.sml General.sml OPTION.sml Option.sml 
      end

    basis List =
      let open General
      in bas
            LIST.sml List.sml LIST_PAIR.sml ListPair.sml
         end
      end

    basis ArrayVector =
        let open General List
            basis Poly =
              let wordtables.sml TableSlice.sml
              in bas 
                    VECTOR.sml Vector.sml 
                    VECTOR_SLICE.sml VectorSlice.sml
                    ARRAY.sml Array.sml
                    ARRAY_SLICE.sml ArraySlice.sml
                    ARRAY2.sml Array2.sml
                 end
              end
        in bas
              open Poly   

              MONO_VECTOR.sml MONO_ARRAY.sml ByteTable.sml 
	      MONO_VECTOR_SLICE.sml MONO_ARRAY_SLICE.sml ByteSlice.sml
           end
        end

    basis String = 
       let open General ArrayVector
       in bas
             STRING_CVT.sml StringCvt.sml 
             local open List
                   STR_BASE.sml StrBase.sml 
             in
                Char.sml String.sml CHAR.sml STRING.sml SUBSTRING.sml Substring.sml
             end
          end
       end

    basis Text =
       let open String ArrayVector
       in bas TEXT.sml Text.sml end
       end

    basis Bool = 
       let open General String 
       in bas BOOL.sml Bool.sml end
       end

    basis IntInfRep =
       let open General List
       in bas INT_INF_REP.sml IntInfRep.sml end
       end

    basis Word =
       let open General String IntInfRep
           basis W = 
             bas 
               WORD.sml Word32.sml Word8.sml Word31.sml 
             end
           basis PW = let open ArrayVector W
                      in bas PACK_WORD.sml Pack32Little.sml Pack32Big.sml end 
                      end
       in bas open W PW end
       end

    basis Byte = 
       let open General String ArrayVector Word
       in bas BYTE.sml Byte.sml end
       end
 
    basis Int =
       let open General String IntInfRep
       in bas 
            INTEGER.sml Int32.sml Int31.sml 
          end
       end

    basis Real =
       let open General String Int
       in bas MATH.sml Math.sml REAL.sml Real.sml 
(*
	    local open Byte ArrayVector
            in PACK_REAL.sml PackRealLittle.sml PackRealBig.sml
            end
*)
	  end
       end

    basis IntInf =
       let open General List ArrayVector String Word Int Real
       in bas ann safeLinkTimeElimination
              in INT_INF.sml IntInf.sml 
              end
          end
       end
(*
    basis System =
       let open General String Int
       in let basis Time = let open Int Real IntInf in bas TIME.sml Time.sml end end
              basis Random = let open Real in bas RANDOM.sml Random.sml end end
              basis Path = let open List in bas OS_PATH.sml Path.sml end end
              basis Os = let open Path in bas OS.sml end end
              basis Date = let open Int Real Time IntInf in bas DATE.sml Date.sml end end
              basis Timer = let open Int Time IntInf in bas TIMER.sml Timer.sml end end
          in bas open Time Random Path Os Date Timer
             end
          end
       end
*)
in
  open General List ArrayVector String Bool Word Byte Text 
       Int Real IntInf IntInfRep (* System *)
end
